{"version":3,"file":"static/js/204.f36afaad.chunk.js","mappings":"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","sources":["redux/filter/selectors.js","redux/contacts/selectors.js","hooks/useContacts.js","components/ContactModal/ContactModal.jsx","utils/formatPhoneNumber.js","components/UpdateContact/UpdateContact.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","utils/sortArrOfObj.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/PhoneBook.jsx"],"sourcesContent":["export const getFilter = state => state.filter;\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectLoading,\n  selectFilter,\n  selectAllContacts,\n} from '../redux/contacts/selectors';\nimport * as operations from '../redux/contacts/operations';\n\nexport const useContacts = () => {\n  const dispatch = useDispatch();\n\n  const isContactsLoading = useSelector(selectLoading);\n  const isContactsFiltered = useSelector(selectFilter);\n  const isAllContacts = useSelector(selectAllContacts);\n\n  const fetchContacts = async () => {\n    await dispatch(operations.fetchContacts()).unwrap();\n  };\n\n  const addContact = async newContact => {\n    await dispatch(operations.addContact(newContact)).unwrap();\n  };\n\n  const deleteContact = async id => {\n    await dispatch(operations.deleteContact(id)).unwrap();\n  };\n\n  const updateContact = async data => {\n    await dispatch(operations.updateContact(data)).unwrap();\n  };\n\n  return {\n    isContactsLoading,\n    isContactsFiltered,\n    isAllContacts,\n    fetchContacts,\n    addContact,\n    deleteContact,\n    updateContact,\n  };\n};\n","import React from 'react';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  Container,\n  Box,\n} from '@chakra-ui/react';\n\nexport const ContactModal = ({\n  buttonName,\n  modalTitle,\n  modalBody,\n  isOpen,\n  onOpen,\n  onClose,\n}) => {\n  const Overlay = () => (\n    <ModalOverlay\n      bg=\"blackAlpha.300\"\n      backdropFilter=\"blur(10px) hue-rotate(90deg)\"\n    />\n  );\n\n  const [overlay, setOverlay] = React.useState(<Overlay />);\n\n  return (\n    <Container>\n      <Box py={4}>\n        <Button\n          onClick={() => {\n            setOverlay(<Overlay />);\n            onOpen();\n          }}\n          variant=\"brand\"\n        >\n          {buttonName}\n        </Button>\n      </Box>\n\n      <Modal isCentered isOpen={isOpen} onClose={onClose}>\n        {overlay}\n        <ModalContent px={4} py={8}>\n          <ModalCloseButton />\n          <ModalHeader as=\"h2\" fontSize=\"xl\" align=\"center\">\n            {modalTitle}\n          </ModalHeader>\n          <ModalBody>{modalBody}</ModalBody>\n        </ModalContent>\n      </Modal>\n    </Container>\n  );\n};\n","export const formatPhoneNumber = number => {\n  const cleaned = ('' + number).replace(/\\D/g, '');\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{2})(\\d{2})$/);\n\n  if (match) {\n    return '(' + match[1] + ')-' + match[2] + '-' + match[3] + '-' + match[4];\n  }\n\n  return null;\n};\n\nexport const delSeparators = number => {\n  const cleanedNumber = number.replace(/[()-]/g, '');\n\n  return cleanedNumber;\n};\n","import { useContacts } from 'hooks/useContacts';\nimport { delSeparators, formatPhoneNumber } from 'utils/formatPhoneNumber';\nimport {\n  Input,\n  Stack,\n  InputGroup,\n  InputLeftElement,\n  Icon,\n  Button,\n  FormLabel,\n  InputLeftAddon,\n} from '@chakra-ui/react';\nimport { BsFillPersonFill } from 'react-icons/bs';\n\nexport const UpdateContact = ({ id, name, number, onSubmit }) => {\n  const { updateContact } = useContacts();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const name = form.elements.name.value.trim();\n    const number = form.elements.number.value;\n\n    const updatedContact = {\n      id,\n      name,\n      number: formatPhoneNumber(number),\n    };\n\n    try {\n      await updateContact(updatedContact);\n      form.reset();\n      onSubmit();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <Stack spacing={2}>\n          <FormLabel htmlFor=\"name\" m=\"0\">\n            Name:\n          </FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <Icon as={BsFillPersonFill} color=\"gray.300\" />\n            </InputLeftElement>\n\n            <Input\n              as=\"input\"\n              name=\"name\"\n              defaultValue={name}\n              minLength={3}\n              id=\"name\"\n            />\n          </InputGroup>\n          <FormLabel htmlFor=\"number\" m=\"0\">\n            Phone:\n          </FormLabel>\n          <InputGroup>\n            <InputLeftAddon>+38</InputLeftAddon>\n            <Input\n              as=\"input\"\n              name=\"number\"\n              minLength={10}\n              maxLength={10}\n              id=\"number\"\n              defaultValue={delSeparators(number)}\n            />\n          </InputGroup>\n          <Button type=\"submit\" variant=\"brand\" mt={4}>\n            Update contact\n          </Button>\n        </Stack>\n      </form>\n    </>\n  );\n};\n","import { useContacts } from 'hooks/useContacts';\nimport {\n  Flex,\n  Avatar,\n  Box,\n  Text,\n  Button,\n  Divider,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport { ContactModal } from 'components/ContactModal/ContactModal';\nimport { UpdateContact } from 'components/UpdateContact/UpdateContact';\n\nexport const Contact = ({ id, name, number }) => {\n  const { deleteContact } = useContacts();\n  const update = useDisclosure();\n\n  return (\n    <>\n      <Flex align=\"center\" p={2}>\n        <Avatar src=\"https://bit.ly/broken-link\" />\n        <Box ml=\"3\">\n          <Text fontWeight=\"bold\">{name}</Text>\n          <Text fontSize=\"sm\">{number}</Text>\n        </Box>\n        <Box ml=\"auto\" display=\"flex\" alignItems=\"center\">\n          <ContactModal\n            {...update}\n            buttonName={'Update'}\n            modalTitle={'Update you contact'}\n            modalBody={\n              <UpdateContact\n                id={id}\n                name={name}\n                number={number}\n                onSubmit={update.onClose}\n              />\n            }\n          />\n          <Button\n            type=\"button\"\n            onClick={() => deleteContact(id)}\n            variant=\"brand\"\n          >\n            <DeleteIcon />\n          </Button>\n        </Box>\n      </Flex>\n      <Divider />\n    </>\n  );\n};\n","import { useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/filter/selectors';\nimport { useContacts } from 'hooks/useContacts';\nimport { sortArrOfObj } from 'utils/sortArrOfObj';\nimport { Contact } from '../Contact/Contact';\nimport { Container, List, ListItem, Text } from '@chakra-ui/react';\n\nconst ContactList = () => {\n  const filter = useSelector(getFilter);\n  const { isAllContacts } = useContacts();\n\n  const filteringContactsList = () => {\n    if (!isAllContacts) return [];\n    const filteredContacts = isAllContacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n\n  const filteredContactsData = filteringContactsList();\n  const sortedContactsData = sortArrOfObj(filteredContactsData);\n\n  if (sortedContactsData.length === 0) {\n    return (\n      <Container>\n        <Text>\n          Sorry, but you don't have any contacts yet. Add your first contact.\n        </Text>\n      </Container>\n    );\n  }\n\n  return (\n    <Container mb={20}>\n      <List spacing={4}>\n        {sortedContactsData.map(({ id, name, number }) => (\n          <ListItem key={id}>\n            <Contact name={name} number={number} id={id} />\n          </ListItem>\n        ))}\n      </List>\n    </Container>\n  );\n};\n\nexport default ContactList;\n","export const sortArrOfObj = array => {\n  return array.slice().sort((a, b) => {\n    const fa = a.name.toLowerCase();\n    const fb = b.name.toLowerCase();\n    return fa.localeCompare(fb);\n  });\n};\n","import { useContacts } from 'hooks/useContacts';\nimport { formatPhoneNumber } from 'utils/formatPhoneNumber';\nimport toast from 'react-hot-toast';\nimport {\n  Input,\n  Stack,\n  InputGroup,\n  InputLeftElement,\n  Icon,\n  Button,\n  FormLabel,\n  InputLeftAddon,\n} from '@chakra-ui/react';\nimport { BsFillPersonFill } from 'react-icons/bs';\n\nconst ContactForm = ({ onSubmit }) => {\n  const { isAllContacts, addContact } = useContacts();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const name = form.elements.name.value.trim();\n    const number = form.elements.number.value;\n\n    const isNameAlreadyExist = isAllContacts.some(\n      contact => contact.name.toLowerCase().trim() === name.toLowerCase()\n    );\n\n    if (isNameAlreadyExist) {\n      toast.error(`${name} is already in contacts.`, {\n        position: 'top-center',\n      });\n      return;\n    }\n\n    const newContact = {\n      name,\n      number: formatPhoneNumber(number),\n    };\n\n    try {\n      await addContact(newContact);\n      form.reset();\n      onSubmit();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <Stack spacing={2}>\n          <FormLabel htmlFor=\"name\" m=\"0\">\n            Name:\n          </FormLabel>\n          <InputGroup>\n            <InputLeftElement pointerEvents=\"none\">\n              <Icon as={BsFillPersonFill} color=\"gray.300\" />\n            </InputLeftElement>\n\n            <Input\n              as=\"input\"\n              name=\"name\"\n              placeholder=\"Name\"\n              minLength={3}\n              id=\"name\"\n            />\n          </InputGroup>\n          <FormLabel htmlFor=\"number\" m=\"0\">\n            Phone:\n          </FormLabel>\n          <InputGroup>\n            <InputLeftAddon>+38</InputLeftAddon>\n            <Input\n              as=\"input\"\n              name=\"number\"\n              placeholder=\"(096)-11-11-111\"\n              minLength={10}\n              maxLength={10}\n              id=\"number\"\n            />\n          </InputGroup>\n          <Button type=\"submit\" variant=\"brand\" mt={4}>\n            Add contact\n          </Button>\n        </Stack>\n      </form>\n    </>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport {\n  Input,\n  Container,\n  Heading,\n  Divider,\n  AbsoluteCenter,\n  Box,\n} from '@chakra-ui/react';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChangeFilterInput = evt => {\n    dispatch(setFilter(evt.target.value.toLowerCase().trim()));\n  };\n\n  return (\n    <Container py={4} px={4}>\n      <Box position=\"relative\" padding=\"6\">\n        <Divider />\n        <AbsoluteCenter px=\"4\">\n          <Heading as=\"h2\" fontSize=\"xl\" align=\"center\">\n            Find contact by name\n          </Heading>\n        </AbsoluteCenter>\n      </Box>\n\n      <Input\n        as=\"input\"\n        onInput={onChangeFilterInput}\n        name=\"filter\"\n        placeholder=\"Start typing a name...\"\n        minLength={3}\n        id=\"filter\"\n      />\n    </Container>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactForm from '../components/ContactForm/ContactForm';\nimport { useContacts } from 'hooks/useContacts';\nimport Filter from 'components/Filter/Filter';\nimport { ContactModal } from 'components/ContactModal/ContactModal';\nimport { useDisclosure } from '@chakra-ui/react';\n\nexport default function Tasks() {\n  const { isContactsLoading, fetchContacts } = useContacts();\n  const register = useDisclosure();\n\n  useEffect(() => {\n    fetchContacts();\n  }, [fetchContacts]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n\n      <div>{isContactsLoading && 'Request in progress...'}</div>\n      <Filter />\n      <ContactModal\n        {...register}\n        buttonName={'Add new contact'}\n        modalTitle={'Add new contact'}\n        modalBody={<ContactForm onSubmit={register.onClose} />}\n      />\n      <ContactList />\n    </>\n  );\n}\n"],"names":["getFilter","state","filter","selectLoading","contacts","loading","selectFilter","selectAllContacts","items","useContacts","dispatch","useDispatch","isContactsLoading","useSelector","isContactsFiltered","isAllContacts","fetchContacts","operations","unwrap","addContact","newContact","deleteContact","id","updateContact","data","ContactModal","buttonName","modalTitle","modalBody","isOpen","onOpen","onClose","Overlay","bg","backdropFilter","React","overlay","setOverlay","py","onClick","variant","isCentered","px","as","fontSize","align","formatPhoneNumber","number","match","replace","delSeparators","UpdateContact","name","onSubmit","handleSubmit","e","preventDefault","form","currentTarget","elements","value","trim","updatedContact","reset","console","log","spacing","htmlFor","m","pointerEvents","BsFillPersonFill","color","I","defaultValue","minLength","maxLength","type","mt","Contact","update","useDisclosure","p","src","ml","fontWeight","display","alignItems","filteredContactsData","contact","toLowerCase","includes","sortedContactsData","slice","sort","a","b","fa","fb","localeCompare","length","mb","map","some","toast","position","placeholder","padding","onInput","evt","setFilter","target","Tasks","register","useEffect","Helmet"],"sourceRoot":""}